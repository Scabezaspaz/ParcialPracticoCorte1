// Estructura completa sencilla Blog con Art√≠culos

package com.blog;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import javax.persistence.*;
import java.time.LocalDate;
import java.util.List;

@SpringBootApplication
public class BlogApplication {
    public static void main(String[] args) {
        SpringApplication.run(BlogApplication.class, args);
    }

    @RestController
    @RequestMapping("/api/articulos")
    public static class ArticuloController {

        @Autowired
        private ArticuloRepository articuloRepository;

        @GetMapping
        public List<Articulo> obtenerTodos(){
            return articuloRepository.findAll();
        }

        @PostMapping
        public Articulo crear(@RequestBody Articulo articulo){
            articulo.setFechaPublicacion(LocalDate.now());
            return articuloRepository.save(articulo);
        }

        @GetMapping("/{id}")
        public Articulo obtenerPorId(@PathVariable Integer id){
            return articuloRepository.findById(id).orElse(null);
        }

        @PutMapping("/{id}")
        public Articulo actualizar(@PathVariable Integer id, @RequestBody Articulo articulo){
            Articulo articuloExistente = articuloRepository.findById(id).orElse(null);
            if (articuloExistente != null){
                articuloExistente.setTitulo(articulo.getTitulo());
                articuloExistente.setContenido(articulo.getContenido());
                articuloExistente.setAutor(articulo.getAutor());
                articuloExistente.setFechaPublicacion(LocalDate.now());
                return articuloRepository.save(articuloExistente);
            }
            return null;
        }

        @DeleteMapping("/{id}")
        public void eliminar(@PathVariable Integer id){
            articuloRepository.deleteById(id);
        }
    }

    @Entity
    public static class Articulo{

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer id;
        private String titulo;
        private String contenido;
        private String autor;
        private LocalDate fechaPublicacion = LocalDate.now();

        // getters y setters

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public String getTitulo() {
            return titulo;
        }

        public void setTitulo(String titulo) {
            this.titulo = titulo;
        }

        public String getContenido() {
            return contenido;
        }

        public void setContenido(String contenido) {
            this.contenido = contenido;
        }

        public String getAutor() {
            return autor;
        }

        public void setAutor(String autor) {
            this.autor = autor;
        }

        public LocalDate getFechaPublicacion() {
            return fechaPublicacion;
        }

        public void setFechaPublicacion(LocalDate fechaPublicacion) {
            this.fechaPublicacion = fechaPublicacion;
        }
    }

    @Repository
    public interface ArticuloRepository extends JpaRepository<Articulo, Integer> {
    }

}

